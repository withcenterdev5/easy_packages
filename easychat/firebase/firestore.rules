rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }
    
    match /chat-rooms/{roomId} {
      function willBeSingle() {
        return request.resource.data.keys().hasAny(["single"]) 
                && request.resource.data.single == true;
      }
      function willBeAtMostOne(field) {
        return !request.resource.data.keys().hasAny([field])
          || (
            request.resource.data.keys().hasAny([field])
            && request.resource.data[field].size() <= 1
          );
      }
      function willBeOnlyMaster() {
        return request.resource.data.masterUsers.hasOnly([request.auth.uid]);
      }
      function willBeOnlyMember() {
        return request.resource.data.users.keys().hasOnly([request.auth.uid]);
      }
      function sameOrRemovingMembers() {
        return request.resource.data.users.keys().hasOnly(resource.data.users.keys());
      }
      function isMember() {
        return resource.data.keys().hasAll(['users']) 
                && request.auth.uid in resource.data.users.keys();
      }
      function isMaster() {
        return resource.data.keys().hasAll(['masterUsers']) 
                && request.auth.uid in resource.data.masterUsers;
      }
      function willBeMember() {
        return request.auth.uid in request.resource.data.users.keys();
      }
      function isJoining() {
        return !isMember() && willBeMember() && onlyAddingOneMember();
      }
      function isLeaving() {
        return !willBeMember()
        && isMember() 
        && onlyRemovingOneMember();
      }
      function isOpenGroup() {
        return resource.data.keys().hasAll([ 'open']) 
                && resource.data.open == true;
      }
      function isSingleChat() {
        return 'single' in resource.data.keys()
                && resource.data.single;
      }
      function isGroupChat() {
        return 'group' in resource.data.keys()
                && resource.data.group;
      }
      function isInvited() {
        return  resource.data.keys().hasAll(['invitedUsers']) 
                && request.auth.uid in resource.data.invitedUsers;
      }
      function willBeRejectedUser() {
        return request.resource.data.keys().hasAny(['rejectedUsers'])
                && request.auth.uid in request.resource.data.rejectedUsers;
      }
      function isRejectedUser() {
        return resource.data.keys().hasAny(['rejectedUsers'])
          && request.auth.uid in resource.data.rejectedUsers;
      }
      function isRejecting() {
        return isInvited()
                && willBeRejectedUser()
                && !isRejectedUser();
      }
      function notUpdating(fields) {
        return resource == null 
          ? !request.resource.data.keys().hasAny(fields)
          : !request.resource.data.diff(resource.data).affectedKeys().hasAny(fields);
      }
      function onlyAddingOneMember() {
        return resource.data.users.keys().toSet().intersection(request.resource.data.users.keys().toSet()) == resource.data.users.keys().toSet()
          && request.resource.data.users.keys().toSet().difference(resource.data.users.keys().toSet()).size() == 1;
      }
      function onlyRemovingOneMember() {
        return request.resource.data.users.keys().toSet().intersection(resource.data.users.keys().toSet()) == request.resource.data.users.keys().toSet()
                && resource.data.users.keys().toSet().difference(request.resource.data.users.keys().toSet()).size() == 1;
      }
      function sameMembers() {
        return request.resource.data.users.keys().toSet().intersection(resource.data.users.keys().toSet()) == request.resource.data.users.keys().toSet()
                && resource.data.users.keys().toSet().difference(request.resource.data.users.keys().toSet()).size() == 0;
      }
      function onlyUpdating(fields) {
        return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields);
      }
      function isBlocked() {
        return resource.data.keys().hasAny(['blockedUsers'])
          && request.auth.uid in resource.data.blockedUsers;
      }

      function allMembersCanInvite() {
        return resource.data.keys().hasAny(['allMembersCanInvite'])
          && resource.data.allMembersCanInvite;
      }
      function updatingCreatedAt() {
        return resource.data.keys().hasAny(['createdAt'])
          && request.resource.data.createdAt != resource.data.createdAt
      }

      // function hasOrderField() {
      //   return 
      //     'users' in resource.data.keys() &&
      //   request.auth.uid in resource.data['users'].keys();
      //   // && 'o' in resource.data.users[request.auth.uid];
      // }
      // Chat Room Rules
      // allow read: if isMember() || isMaster() || isInvited() || isRejectedUser() || isOpenGroup();
    
      // Chat room information is not public. Only members and invited users can read.
      // It also allows the rejected users to read the chat room information NOT because once is was invited,
      // but because there is no easy way of displaying the list of chat rooms that the user has rejected.
      // To secure the chat room information from the rejected users, the chat room information should maintain
      // as less information as possible. For this reason, the chat room does not store the last message.
      // Refere easychat README.md for more information.
      allow read: if isMember() || isInvited() ||  isRejectedUser() || isOpenGroup();
      allow create: if willBeOnlyMember() 
                      && willBeOnlyMaster()
                      && (
                        !willBeSingle()
                        || (willBeSingle() && willBeAtMostOne('invitedUsers'))
                      );
      allow update: if 
        (
          isMaster()
          && sameOrRemovingMembers()
          && (
            !isSingleChat()
            || (
                isSingleChat() 
                && notUpdating(['single'])
                && willBeAtMostOne('invitedUsers')
            )
          ) &&
          !updatingCreatedAt()
        )
        || (
          isJoining()
          && (isOpenGroup() || isInvited() || isRejectedUser())
          && onlyUpdating(['users', 'invitedUsers', 'rejectedUsers', 'updatedAt'])
          && !isBlocked()
        )
        || (
          isLeaving()
          && onlyUpdating(['users', 'updatedAt'])
        )
        || (
          isRejecting()
          && onlyUpdating(['rejectedUsers', 'invitedUsers', 'updatedAt'])
        )
        || (
          isMember()
          && (
            (
              isGroupChat()
              && (
                onlyUpdating(['lastMessageAt', 'users', 'updatedAt'])
                || (
                  (allMembersCanInvite() || isOpenGroup())
                  && onlyUpdating(['lastMessageAt', 'invitedUsers',  'users', 'updatedAt'])
                )

              ) && sameMembers()
            )
            || (
              isSingleChat()
              && onlyUpdating(['lastMessageAt', 'users', 'updatedAt'])
              && sameMembers()
            )
          )
        );
        allow delete: if isMaster();
    }
  // EO of Rules
  }
}


